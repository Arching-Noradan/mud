# BRus MUD Engine readme.

## Содержание

  0. Введение
  1. Требования
  2. Сборка
  3. Запуск

## Введение

Система сборки данного проекта была изменена на CMake, дабы унифицировать сборку под различными платформами.

Сам проект может быть взят по адресу [https://bitbucket.com/kvirund/mud](https://bitbucket.com/kvirund/mud). Оригинальный проект находится по адресу [https://bitbucket.com/bylins/mud](https://bitbucket.com/bylins/mud) однако, в момент написания данного документа он не поддерживает сборку CMake'ом.

Из командной строки это делается следующим образом:

    $ hg clone https://bitbucket.com/bylins/mud
    $ cd mud

## Требования

Перед началом сборки необходимо установить следующие компоненты:

  1. [CMake](https://cmake.org/download/) >= 2.8
  2. [Boost](http://www.boost.org/users/download/) >= 1.54 with python library
  3. [Python](https://www.python.org/downloads/) >= 3.0
  4. [zlib](http://www.zlib.net/)
  5. Компилятор

В действительности, если вы собираете под какой-нибудь Ubuntu, то всё необходимое есть в репозитории. Так, для Ubuntu 14.04 и 15.10 достаточно выполнить следующий набор команд:

    $ sudo apt-get install libz-dev cmake g++ clang python3.4-dev libboost-python-dev mercurial

Здесь оптимистично взят и clang и g++, хотя нужен только один. В зависимости от ваших предпочтений.

Также после установки Boost'а необходимо указать переменную окружения `BOOST_ROOT`, где находится сама библиотека Boost (заголовочные файлы) и как минимум её библиотека libboost-python.

Какой взять компилятор - зависит от платформы под которой вы собираете. В частности, проверялись clang++, g++ и Visual Studio 2015. Более старшие версии Visual Studio с компиляцией не справились.

## Сборка

Сборка состоит из двух этапов:

  1. Генерация файлов проекта
  2. Собственно, компиляция

Далее предполагается, что вы производите сборку в Unix подобной операционной системе (исключения оговариваются). В действительности, имеется ввиду Linux. :)

### Генерация файлов проекта

Допустим, мы находимся в директории с скачанным проектом. Теперь можно создать отдельную директорию для сборки:

    $ mkdir build && cd build

Затем, собственно, генерация файлов проекта. В простейшем случае - это:

    $ cmake ..

Если у вас установлено несколько версий Python'а, то, возможно, вы захотите явно указать необходимую версию. Для этого нужно добавить опцию `-DPY_VERSION=<version>`. Например:

    $ cmake -DPY_VERSION=3.4 ..

Кроме того, если установлено несколько Python'ов, то, возможно, будет и несколько версий библиотеки libboost-python, скомпилированных с разными версиями библиотек Python'а. Для явного указания нужной можно использовать опцию `-DEXPLICIT_BP_VERSION=YES`. Например:

    $ cmake -DPY_VERSION=3.4 -DEXPLICIT_BP_VERSION=YES ..

Указать желаемый компилятор можно используя переменную окружения CXX. Т. к. можно указать переменную окружения непосредственно для запуска некоторой команды просто предварив команду этой переменной, то наша команда могла бы выглядеть так:

    $ CXX=clang++ cmake -DPY_VERSION=3.4 -DEXPLICIT_BP_VERSION=YES ..

Аналогично, вместо выставления переменной окружения BOOST_ROOT, её можно указать как и переменную CXX:

    $ CXX=clang++ BOOST_ROOT=/usr/include cmake -DPY_VERSION=3.4 -DEXPLICIT_BP_VERSION=YES ..

Получившаяся команда сгенерирует Makefile'ы для сборки проекта. В частности, это было проверено на Ubuntu 14.04 и 15.10.

Кроме того, всё это можно было сделать используя GUI, который идёт вместе с cmake'ом.

Для генерации проекта для Visual Studio, возможно, придётся явно указать генератор файла проекта. Например:

    $ cmake -G "Visual Studio 14 2015 Win64" ..

Т. к. по умолчанию генерируется проект для сборки 32-разрядной версии. Т. е. если ваши библиотеки скомпилированы под 64-разрядную архитектуру, то вы получите соответствующее сообщение об ошибке только на самом последнем шаге сборки (линковке).

### Компиляция

Компиляция сводится к выполнению единственной команды:

    $ cmake --build .

Если вы генерировали проект для Visual Studio вы также можете открыть его и собрать проект `ALL_BUILD`.

## Запуск

Если вы собирали проект из Makefile'ов, то в директории с проектом появится исполняемый файл circle. В случае Visual Studio - она покажет, куда сохранила исполняемый файл. Например:

    3>  circle.vcxproj -> S:\repositories\hg\mud\build\Debug\circle.exe
    4>------ Build started: Project: ALL_BUILD, Configuration: Debug x64 ------
    ========== Build: 4 succeeded, 0 failed, 0 up-to-date, 0 skipped ==========

Здесь `S:\repositories\hg\mud` - директория, куда выгружался проект и `S:\repositories\hg\mud\build` - директория, куда были сгенерированы файлы проекта.